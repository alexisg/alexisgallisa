//===============================================
// MIXINS
//===============================================

@mixin show-baseline($color: rgba(cyan,.5)) {
  position: relative;
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
    background-image: linear-gradient(to bottom, $color 0, rgba(255,255,255,0) 1px);
    background-repeat: repeat-y;
    background-size: 100% 1rem;
  }
}

@mixin debug($v: 0) {
  &:before {
    content: unquote("'" + $v + "'");
    background: white;
    color: red;
    padding: 0.25em 0.5em;
    border-radius: 50%;
  }
}

// Convert px,rem,modular scale values
@function px-to-rem($fontsize) {
  @return $fontsize/1px / $base-line-height + 0rem;
}
@function ms-to-rem($fontsize) {
  @return $fontsize / $base-line-height + 0rem;
}
@function rem-to-px($fontsize: 1) {
  @return $fontsize/1rem * $base-line-height + 0px;
}
@function rem-to-ms($fontsize: 1) {
  @return $fontsize * $base-line-height;
}

// GET UNIT VERTICAL - send in PX, REM or unitless
// Since we always want to use rems for our output in vertical space we use the guv() function to show where we are trying to achieve vertical rhytm and spacing. A simple unit type test checks for px, rem or unitless values. Although the rem and unitlesss functions might seem meaningless it will show consistency and frame of mind when looking through subsequent projects
@function guv($q: 1) {
  @if unit($q) == 'px' {
    @return px-to-rem($q);
  } @elseif unit($q) == 'rem' {
    @return $q;
  } @elseif unit($q) == '' {
    @return $q + 0rem;
  } @else {
    @warn ('You must send a rem, px, or unitless value to the guv function');
  }
}

// ---------------------------------------
// SASS LINE SIMPLE
// ---------------------------------------

// Root font-size in %, outputted in correct breakpoints.
@mixin rootsize ($line-height: $base-line-height ) {
  font-size: $line-height / 16 * 100%;
}

// Font-size in rems.
// Use values as you would for pixels i.e. 16 or use values from the modular scale.
@mixin fontsize($fontsize) {
  font-size: #{$fontsize / $base-line-height}rem;
}

// Set fontsize and baseline at once. Mix of fontsize and baseline mixin.
@mixin baseline($fontsize: $base-font-size, $lineheight: "auto", $below: 1) {
  // Lets change this to use http://hugogiraudel.com/2013/08/12/sass-functions/#unit-conversion
  @if unit($fontsize) == "rem" {
    $fontsize: rem-to-ms($fontsize / 1rem);
  }

  @if $lineheight == "auto" {
    line-height: ceil(ms-to-rem($fontsize));
    $lineheight: ceil(ms-to-rem($fontsize))/1rem;
  } @else {
    line-height: #{$lineheight}rem;
  }

  $baseline-shift: #{($fontsize / 2 * (($lineheight * $base-line-height / $fontsize) - $base-cap-height)) / $base-line-height + 0.00001};
  $baseline-push: #{$below - (($fontsize / 2 * (($lineheight * $base-line-height / $fontsize) - $base-cap-height)) / $base-line-height + 0.00001)};

  font-size: #{$fontsize / $base-line-height}rem;
  margin-bottom: #{$baseline-push}rem;
  padding-top: #{$baseline-shift}rem;

  // @debug "Font-value is number";
  // @debug "Fontsize: " + $fontsize;
  // @debug "Rootsize: " + $rootsize;
  // @debug "New font-size: " + #{$fontsize / $rootsize}rem;
  // @debug "cap-height: " + $base-cap-height;
  // @debug "in-scale: " + $in-scale;
  // @debug "baseline-shift: " + $baseline-shift;
  // @debug "baseline-push:" + $baseline-push;
}
